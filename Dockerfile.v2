ARG VERSION=8.3-cli-alpine

# First stage: builder
FROM public.ecr.aws/docker/library/php:${VERSION} AS builder
ARG PHPVERSION
ARG BASEOS

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies based on the base OS with BuildKit cache mounts
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    if [ "$BASEOS" = "trixie" ] || [ "$BASEOS" = "bookworm" ]; then \
        apt-get update && \
        apt-get -y upgrade && \
        apt-get install -y --no-install-recommends \
            curl git zip unzip ghostscript imagemagick \
            optipng gifsicle pngcrush jpegoptim \
            libjpeg-turbo-progs pngquant webp && \
        # Pre-install dev packages for extensions (Trixie uses t64 variants)\
        if [ "$BASEOS" = "trixie" ]; then \
            apt-get install -y --no-install-recommends \
                libmemcached-dev libmemcachedutil2t64 \
                libmagickwand-dev libmagickcore-7.q16-10 \
                libvips-dev libvips42t64 \
                libpng-dev libpng16-16t64 \
                libavif-dev libavif16 \
                libsnmp-dev libsnmp40t64; \
        else \
            apt-get install -y --no-install-recommends \
                libmemcached-dev libmemcachedutil2 \
                libmagickwand-dev libmagickcore-6.q16-6 \
                libvips-dev libvips42 \
                libpng-dev libpng16-16 \
                libavif-dev libavif15 \
                libsnmp-dev libsnmp40; \
        fi && \
        rm -rf /var/lib/apt/lists/*; \
    elif [ "$BASEOS" = "alpine" ]; then \
        apk update && \
        apk add --no-cache \
            curl git zip unzip ghostscript imagemagick \
            optipng gifsicle pngcrush jpegoptim \
            libjpeg-turbo libjpeg-turbo-utils pngquant libwebp-tools; \
    fi

# Download PHP extension installer
RUN curl -sSLf -o /usr/local/bin/install-php-extensions \
        https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions && \
    chmod +x /usr/local/bin/install-php-extensions

# Install PHP extensions grouped by category
RUN install-php-extensions \
    # Web development extensions
    json mysqli pdo_mysql pdo_pgsql pgsql soap sockets \
    # Performance & caching extensions
    opcache redis memcached zstd \
    # File operation extensions
    zip bz2 \
    # Utility extensions
    amqp bcmath calendar ctype exif intl imagick imap ldap mbstring mcrypt \
    mongodb snmp tidy timezonedb uuid vips xsl yaml \
    # Package manager
    @composer

# Enable Apache rewrite mod if applicable
RUN if command -v a2enmod; then \
      a2enmod rewrite headers; \
    fi

# # Add mcrypt based on PHP version
# RUN case "$PHPVERSION" in \
#         8.0|8.1|8.2|8.3) \
#             install-php-extensions mcrypt; \
#             ;; \
#         8.4) \
#             ;; \
#         *) \
#             ;; \
#     esac

# Install GD with architecture-specific configuration
RUN case $(uname -m) in \
        x86_64|aarch64) \
            install-php-extensions gd; \
            ;; \
        armv7l) \
            IPE_GD_WITHOUTAVIF=1 install-php-extensions gd; \
            ;; \
        *) \
            install-php-extensions gd; \
            ;; \
    esac

# Second stage: production
FROM public.ecr.aws/docker/library/php:${VERSION}
ARG BASEOS
ARG S6_OVERLAY_VERSION=3.2.0.2
ARG TARGETARCH

# Copy installed extensions and configurations from builder
COPY --from=builder /usr/local/ /usr/local/

# Install S6 Overlay init system
RUN if [ "$BASEOS" = "trixie" ] || [ "$BASEOS" = "bookworm" ]; then \
        apt-get update && \
        apt-get install -y --no-install-recommends \
            xz-utils \
            ca-certificates \
            wget && \
        case "${TARGETARCH}" in \
            "amd64") S6_ARCH="x86_64" ;; \
            "arm64") S6_ARCH="aarch64" ;; \
            "arm") S6_ARCH="armhf" ;; \
            *) S6_ARCH="x86_64" ;; \
        esac && \
        wget -q https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
        wget -q https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-${S6_ARCH}.tar.xz && \
        tar -C / -Jxpf s6-overlay-noarch.tar.xz && \
        tar -C / -Jxpf s6-overlay-${S6_ARCH}.tar.xz && \
        rm s6-overlay-noarch.tar.xz s6-overlay-${S6_ARCH}.tar.xz; \
    elif [ "$BASEOS" = "alpine" ]; then \
        apk add --no-cache \
            xz \
            ca-certificates \
            wget && \
        case "${TARGETARCH}" in \
            "amd64") S6_ARCH="x86_64" ;; \
            "arm64") S6_ARCH="aarch64" ;; \
            "arm") S6_ARCH="armhf" ;; \
            *) S6_ARCH="x86_64" ;; \
        esac && \
        wget -q https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz && \
        wget -q https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-${S6_ARCH}.tar.xz && \
        tar -C / -Jxpf s6-overlay-noarch.tar.xz && \
        tar -C / -Jxpf s6-overlay-${S6_ARCH}.tar.xz && \
        rm s6-overlay-noarch.tar.xz s6-overlay-${S6_ARCH}.tar.xz; \
    fi

# Install required system libraries based on OS
RUN if [ "$BASEOS" = "trixie" ] || [ "$BASEOS" = "bookworm" ]; then \
        apt-get update && \
        apt-get install -y --no-install-recommends \
            librabbitmq4 \
            libpng16-16t64 \
            libmagickwand-7.q16-10\
            # libc-client2007e \
            libsnappy1v5 \
            libpq5 \
            libsnmp40t64 \
            libtidy58 \
            libvips42t64 \
            libxslt1.1 \
            libyaml-0-2 \
            libzip5 \
            libmemcached11t64 \
            ghostscript \
            imagemagick \
            libwebp7 \
            libavif16 \
            libicu76 \
            libldap2 \
            libuuid1 \
            libxpm4 && \
        rm -rf /var/lib/apt/lists/*; \
    elif [ "$BASEOS" = "alpine" ]; then \
        apk add --no-cache \
            rabbitmq-c \
            libpng \
            imagemagick \
            c-client \
            snappy \
            libpq \
            net-snmp-libs \
            tidyhtml-libs \
            vips \
            libxslt \
            yaml \
            libzip \
            libmemcached \
            ghostscript \
            libwebp \
            libavif \
            icu-libs \
            openldap \
            libuuid \
            libxpm; \
    fi

# Set useful PHP environment variables with defaults
ENV PHP_MEMORY_LIMIT=256M \
    PHP_UPLOAD_MAX_FILESIZE=64M \
    PHP_POST_MAX_SIZE=64M \
    PHP_MAX_EXECUTION_TIME=300 \
    PHP_MAX_INPUT_VARS=1000 \
    PHP_ERROR_REPORTING=E_ALL \
    PHP_DISPLAY_ERRORS=Off \
    PHP_LOG_ERRORS=On \
    PHP_OPCACHE_MEMORY_CONSUMPTION=128 \
    PHP_OPCACHE_INTERNED_STRINGS_BUFFER=16 \
    PHP_OPCACHE_MAX_ACCELERATED_FILES=10000 \
    PHP_OPCACHE_REVALIDATE_FREQ=0 \
    PHP_SESSION_GC_MAXLIFETIME=1440 \
    PHP_MAX_FILE_UPLOADS=20 \
    PHP_DATE_TIMEZONE=UTC \
    S6_BEHAVIOUR_IF_STAGE2_FAILS=2

# Create non-root user for better security
RUN if [ "$BASEOS" != "alpine" ]; then \
      groupadd --gid 1000 appuser && \
      useradd --uid 1000 --gid 1000 -m appuser; \
    else \
      addgroup -g 1000 -S appuser && \
      adduser -u 1000 -S appuser -G appuser; \
    fi

# Set working directory and permissions
WORKDIR /var/www/html
RUN mkdir -p /var/www/html && \
    chown -R appuser:appuser /var/www/html && \
    chmod -R 755 /var/www/html && \
    mkdir -p /usr/local/etc/php/conf.d && \
    chmod -R 755 /usr/local/etc/php/conf.d

# Create S6 directory structure
RUN mkdir -p \
    /etc/cont-init.d \
    /etc/services.d/php

# Copy S6 configuration files
COPY s6-overlay/cont-init.d/ /etc/cont-init.d/
COPY s6-overlay/services.d/ /etc/services.d/

# Set permissions for S6 scripts and ensure they have correct line endings
RUN chmod -R 755 /etc/cont-init.d /etc/services.d && \
    # Ensure S6 directories have proper permissions
    mkdir -p /var/run/s6 && \
    chmod -R 755 /var/run/s6 && \
    # Make sure scripts are executable and have correct line endings
    if [ "$BASEOS" = "trixie" ] || [ "$BASEOS" = "bookworm" ]; then \
        apt-get update && \
        apt-get install -y --no-install-recommends dos2unix && \
        dos2unix /etc/cont-init.d/* /etc/services.d/php/* && \
        rm -rf /var/lib/apt/lists/*; \
    elif [ "$BASEOS" = "alpine" ]; then \
        apk add --no-cache dos2unix && \
        dos2unix /etc/cont-init.d/* /etc/services.d/php/* && \
        apk del --no-cache dos2unix; \
    fi

ENTRYPOINT ["/init"]
CMD ["php", "-a"]
